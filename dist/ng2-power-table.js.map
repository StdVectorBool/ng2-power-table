{"version":3,"sources":["../src/Sort/Sort.directive.ts","../src/Table/Table.directive.ts","../src/Pagination/Pagination.component.ts","../src/Configuration/ConfigurationProvider.class.ts","../src/TableState/DefaultTableState.class.ts","../src/Sort/SortOrder.enum.ts","../src/Pipe/DefaultDataPipeService.class.ts","../src/Configuration/DefaultConfiguration.class.ts","../ng2-power-table.ts"],"names":[],"mappings":"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","file":"ng2-power-table.js","sourcesContent":["import { Directive, Input, ElementRef, Renderer, SimpleChange, Inject, Host } from \"@angular/core\";\r\nimport { TableDirective } from \"./../Table/Table.directive\";\r\nimport { ITableState } from \"./../TableState/ITableState.interface\"\r\nimport { SortOrder } from \"./SortOrder.enum\";\r\n\r\n@Directive({\r\n    selector: \"[ptSort]\"\r\n})\r\nexport class SortDirective {\r\n\r\n    @Input(\"ptSort\")\r\n    public predicate: string;\r\n    public order: SortOrder;\r\n\r\n    private removeClickListener: Function;\r\n    private removeTableStateListener: any;\r\n    private removeSortListener: any;\r\n    private suppressSortChangedHandler: boolean;\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor(public table: TableDirective,\r\n        private element: ElementRef,\r\n        private renderer: Renderer) {\r\n        this.order = SortOrder.NotSet;\r\n        this.suppressSortChangedHandler = false;\r\n\r\n        this.removeClickListener = this.renderer.listen(this.element.nativeElement, 'click', (ev: MouseEvent) => {\r\n            this.onClicked(ev);\r\n        });\r\n\r\n        this.removeTableStateListener = this.table.tableStateChange.subscribe((tableState: ITableState) => {\r\n            this.onTableStateChanged(tableState);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.removeClickListener) this.removeClickListener();\r\n        if (this.removeTableStateListener && this.removeTableStateListener.unsubscribe) this.removeTableStateListener.unsubscribe();\r\n        this.unsubscribeToSortListener();\r\n    }\r\n\r\n    private unsubscribeToSortListener() {\r\n        if (this.removeSortListener && this.removeSortListener.unsubscribe)\r\n            this.removeSortListener.unsubscribe();\r\n    }\r\n\r\n    private resolveTableState() {\r\n\r\n        if (this.suppressSortChangedHandler) {\r\n            // this directive is causing the callback   \r\n            return;\r\n        }\r\n\r\n        if ((!this.table.tableState.sort.predicate || (this.table.tableState.sort.predicate !== this.predicate))\r\n            && this.order !== SortOrder.NotSet) {\r\n            // tableState has no predicate set, everything should be clear\r\n            this.order = SortOrder.NotSet;\r\n            this.updateSortDisplay();\r\n            // fix css classes\r\n            return;\r\n        }\r\n\r\n        if (!this.table.tableState.sort.predicate)\r\n            return;\r\n\r\n        if (this.table.tableState.sort.predicate === this.predicate\r\n            && this.table.tableState.sort.order !== this.order) {\r\n            // since suppressSortChangedHandler was not set, we can safely assume\r\n            // we need to trigger sort.\r\n            this.order = this.table.tableState.sort.order;\r\n            this.updateSortDisplay();\r\n            this.table.pipe();\r\n            // fix css classes\r\n            return;\r\n        }\r\n    }\r\n\r\n    private onTableStateChanged(tableState: ITableState) {\r\n        this.unsubscribeToSortListener();\r\n        this.resolveTableState();\r\n\r\n        this.removeSortListener = tableState.sort.changed.subscribe(() => {\r\n            this.resolveTableState();\r\n        });\r\n    }\r\n\r\n    private updateSortDisplay() {\r\n        var config = this.table.getConfiguration();\r\n        var addAscending: boolean = (this.order === SortOrder.Ascending);\r\n        var addDescending: boolean = (this.order === SortOrder.Descending);\r\n\r\n        if (!addDescending && addAscending) {\r\n            this.setElementClass(config.descendingCssClass, addDescending);\r\n            this.setElementClass(config.ascendingCssClass, addAscending);\r\n        }\r\n        else {\r\n            this.setElementClass(config.ascendingCssClass, addAscending);\r\n            this.setElementClass(config.descendingCssClass, addDescending);\r\n        }\r\n    }\r\n\r\n    private setElementClass(classValue: string, add: boolean) {\r\n        var classes = classValue.split(' ');\r\n\r\n        for (var i = 0; i < classes.length; i++) {\r\n            var value = classes[i];\r\n            this.renderer.setElementClass(this.element.nativeElement, value, add);\r\n        }\r\n    }\r\n\r\n    private onClicked(ev: MouseEvent) {\r\n        if (this.order === SortOrder.Descending) {\r\n            // manual reset\r\n            this.order = SortOrder.NotSet;\r\n        } else {\r\n            this.order++;\r\n        }\r\n        this.updateSortDisplay();\r\n\r\n        this.suppressSortChangedHandler = true;\r\n\r\n        var state = this.table.tableState;\r\n        state.sort.predicate = this.predicate;\r\n        state.sort.order = this.order;\r\n\r\n        this.table.pipe();\r\n        this.suppressSortChangedHandler = false;\r\n    }\r\n}","import { Directive, EventEmitter, Output, Input, SimpleChanges, OnChanges, ChangeDetectorRef, DoCheck, Injector } from \"@angular/core\";\r\n\r\nimport { ITableState } from \"./../TableState/ITableState.interface\";\r\nimport { DefaultTableState } from \"./../TableState/DefaultTableState.class\";\r\nimport { SortOrder } from './../Sort/SortOrder.enum';\r\nimport { ConfigurationProvider } from './../Configuration/ConfigurationProvider.class';\r\nimport { IConfiguration } from './../Configuration/IConfiguration.interface';\r\nimport { IDataPipeService } from './../Pipe/IDataPipeService.interface';\r\n\r\n@Directive({\r\n    selector: \"[ptTable]\"\r\n})\r\nexport class TableDirective {\r\n    private dataPipeService: IDataPipeService;\r\n    private currentConfiguration: IConfiguration;\r\n    private removeConfigListener: any;\r\n\r\n    /*\r\n        one-way binding, consumer provides originalArray\r\n    */\r\n    @Input('ptTable')\r\n    public originalArray: Array<any>;\r\n\r\n    /*\r\n        two-way binding for ptDisplayArray\r\n    */\r\n    @Input('ptDisplayArray')\r\n    public displayArray: Array<any>;\r\n    @Output('ptDisplayArrayChange')\r\n    displayArrayChange: EventEmitter<Array<any>> = new EventEmitter<Array<any>>();\r\n\r\n    /*\r\n        two-way binding for ITableState\r\n    */\r\n    @Input()\r\n    public tableState: ITableState;\r\n    @Output()\r\n    tableStateChange: EventEmitter<ITableState> = new EventEmitter<ITableState>();\r\n\r\n    /*\r\n        one-way binding, consumer can override configuration vs using globalConfiguration\r\n    */\r\n    @Input('ptConfiguration')\r\n    public configurationOverride: IConfiguration;\r\n\r\n    constructor(private changeDetectorRef: ChangeDetectorRef,\r\n        private injector: Injector,\r\n        private configurationProvider: ConfigurationProvider) {\r\n\r\n        this.removeConfigListener = this.configurationProvider.globalConfigurationChanged.subscribe((config: IConfiguration) => {\r\n            this.currentConfiguration = null;\r\n            this.pipe();\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.removeConfigListener && this.removeConfigListener.unsubscribe) this.removeConfigListener.unsubscribe();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getTableState();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes['originalArray']) {\r\n            this.pipe();\r\n        }\r\n        if (changes['configurationOverride']) {\r\n            this.dataPipeService = null;\r\n            this.currentConfiguration = null;\r\n            this.pipe();\r\n        }\r\n    }\r\n\r\n    private getTableState() {\r\n        if (!this.tableState) {\r\n            this.tableState = new DefaultTableState();\r\n            this.tableStateChange.emit(this.tableState);\r\n            this.changeDetectorRef.detectChanges();\r\n        }\r\n        return this.tableState;\r\n    }\r\n\r\n    public doSearch(predicate: string, reverse: boolean) {\r\n        // update table state\r\n        // \r\n\r\n        this.pipe();\r\n    }\r\n\r\n    public getConfiguration(): IConfiguration {\r\n        if (this.currentConfiguration)\r\n            return this.currentConfiguration;\r\n\r\n        if (this.configurationOverride) {\r\n            this.currentConfiguration = this.configurationOverride;\r\n        } else {\r\n            this.currentConfiguration = this.configurationProvider.globalConfiguration;\r\n        }\r\n\r\n        return this.currentConfiguration;\r\n    }\r\n\r\n    public pipe() {\r\n        var state = this.getTableState();\r\n        var config = this.getConfiguration();\r\n\r\n        if (!this.dataPipeService) {\r\n            this.dataPipeService = this.injector.get(config.pipeServiceType);\r\n        }\r\n\r\n        this.displayArray = this.dataPipeService.pipe(this.originalArray, state, config);\r\n\r\n        this.displayArrayChange.emit(this.displayArray);\r\n        this.changeDetectorRef.detectChanges();\r\n    };\r\n}\r\n","import { Component, OnInit, Host } from '@angular/core';\r\n\r\nimport { TableDirective } from './../Table/Table.directive';\r\nimport { ITableState } from './../TableState/ITableState.interface';\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: 'pt-pagination',\r\n    templateUrl: \"./Pagination.component.html\"\r\n})\r\nexport class PaginationComponent {\r\n    private removeTableStateListener: any;\r\n    private removePaginationListener: any;\r\n\r\n    public currentPage: number;\r\n    public pages: Array<number>;\r\n    public numPages: number;\r\n\r\n    public displayedPagesCount: number;\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor(public table: TableDirective) {\r\n\r\n        this.displayedPagesCount = 5;\r\n\r\n        this.removeTableStateListener = this.table.tableStateChange.subscribe((tableState: ITableState) => {\r\n            this.onTableStateChanged(tableState);\r\n        });\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.rebuildPagination();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.removeTableStateListener && this.removeTableStateListener.unsubscribe) this.removeTableStateListener.unsubscribe();\r\n        this.unsubscribeToPagination();\r\n    }\r\n\r\n    private unsubscribeToPagination() {\r\n        if (this.removePaginationListener && this.removePaginationListener.unsubscribe) this.removePaginationListener.unsubscribe();\r\n    }\r\n\r\n    private rebuildPagination() {\r\n        var start = 1;\r\n        var end: number;\r\n        var i: number;\r\n\r\n        //scope.totalItemCount = paginationState.totalItemCount;\r\n        var pagination = this.table.tableState.pagination;\r\n\r\n        this.currentPage = Math.floor(pagination.start / pagination.pageSize) + 1;\r\n\r\n        start = Math.max(start, this.currentPage - Math.abs(Math.floor(this.displayedPagesCount / 2)));\r\n        end = start + this.displayedPagesCount;\r\n\r\n        if (end > pagination.numberOfPages) {\r\n            end = pagination.numberOfPages + 1;\r\n            start = Math.max(1, end - this.displayedPagesCount);\r\n        }\r\n\r\n        this.pages = [];\r\n        this.numPages = pagination.numberOfPages;\r\n\r\n        for (i = start; i < end; i++) {\r\n            this.pages.push(i);\r\n        }\r\n\r\n    }\r\n\r\n    public goToFirstPage() {\r\n        this.selectPage(1);\r\n    }\r\n\r\n    public goToPreviousPage() {\r\n        this.selectPage(this.currentPage - 1);\r\n    }\r\n\r\n    public goToNextPage() {\r\n        this.selectPage(this.currentPage + 1);\r\n    }\r\n\r\n    public goToLastPage() {\r\n        this.selectPage(this.numPages);\r\n    }\r\n\r\n    public selectPage(page: number): void {\r\n        if (page > 0 && page <= this.numPages) {\r\n            var pageSize = this.table.tableState.pagination.pageSize;\r\n            this.triggerPaging((page - 1) * pageSize);\r\n        }\r\n    }\r\n\r\n    private triggerPaging(start: number) {\r\n        this.table.tableState.pagination.start = start;\r\n        this.table.pipe();\r\n    }\r\n\r\n    private onTableStateChanged(tableState: ITableState) {\r\n        this.unsubscribeToPagination();\r\n        this.rebuildPagination();\r\n\r\n        this.removePaginationListener = tableState.pagination.changed.subscribe(() => {\r\n            this.rebuildPagination();\r\n        });\r\n    }\r\n}","import { EventEmitter, Injectable } from \"@angular/core\";\r\nimport { DefaultConfiguration } from \"./DefaultConfiguration.class\";\r\nimport { IConfiguration } from \"./IConfiguration.interface\";\r\n\r\n@Injectable()\r\nexport class ConfigurationProvider {\r\n\r\n    public globalConfigurationChanged: EventEmitter<IConfiguration> = new EventEmitter<IConfiguration>();\r\n    private unsubscribeObject: any;\r\n\r\n    private _globalConfiguration: IConfiguration;\r\n    get globalConfiguration(): IConfiguration {\r\n        if (!this._globalConfiguration) {\r\n            this._globalConfiguration = DefaultConfiguration.create();\r\n            this.registerListener();\r\n        }\r\n\r\n        return this._globalConfiguration;\r\n    }\r\n    set globalConfiguration(config: IConfiguration) {\r\n        if (this.unsubscribeObject && this.unsubscribeObject.unsubscribe)\r\n            this.unsubscribeObject.unsubscribe();\r\n\r\n        var original = this._globalConfiguration;\r\n        this._globalConfiguration = config;\r\n\r\n        if (original !== this._globalConfiguration && this._globalConfiguration) {\r\n            this.registerListener();\r\n            this.globalConfigurationChanged.emit(this._globalConfiguration);\r\n        }\r\n    }\r\n\r\n    private registerListener() {\r\n        this.unsubscribeObject = this._globalConfiguration.changed.subscribe(() => {\r\n            this.globalConfigurationChanged.emit(this._globalConfiguration);\r\n        })\r\n    }\r\n\r\n}","import { EventEmitter } from \"@angular/core\";\r\nimport { ITableState, ITableStatePagination, ITableStateSearch, ITableStateSort } from \"./ITableState.interface\";\r\nimport { SortOrder } from './../Sort/SortOrder.enum';\r\n\r\nexport class DefaultTableStateSearch implements ITableStateSearch {\r\n\r\n}\r\n\r\nexport class DefaultTableStatePagination implements ITableStatePagination {\r\n    \r\n    public changed: EventEmitter<void> = new EventEmitter<void>();\r\n    \r\n    private _start: number;\r\n    get start(): number {\r\n        return this._start;\r\n    }\r\n    set start(value: number) {\r\n        var original = this._start;\r\n        this._start = value;\r\n\r\n        if (original !== this._start) \r\n            this.changed.emit();\r\n    }\r\n    \r\n    private _end: number;\r\n    get end(): number {\r\n        return this._end;\r\n    }\r\n    set end(value: number) {\r\n        var original = this._end;\r\n        this._end = value;\r\n\r\n        if (original !== this._end) \r\n            this.changed.emit();\r\n    }\r\n    \r\n    private _pageSize: number;\r\n    get pageSize(): number {\r\n        return this._pageSize;\r\n    }\r\n    set pageSize(value: number) {\r\n        var original = this._pageSize;\r\n        this._pageSize = value;\r\n\r\n        if (original !== this._pageSize) \r\n            this.changed.emit();\r\n    }\r\n\r\n    private _totalItemCount: number;\r\n    get totalItemCount(): number {\r\n        return this._totalItemCount;\r\n    }\r\n    set totalItemCount(value: number) {\r\n        var original = this._totalItemCount;\r\n        this._totalItemCount = value;\r\n\r\n        if (original !== this._totalItemCount) \r\n            this.changed.emit();\r\n    }\r\n\r\n    private _numberOfPages: number;\r\n    get numberOfPages(): number {\r\n        return this._numberOfPages;\r\n    }\r\n    set numberOfPages(value: number) {\r\n        var original = this._numberOfPages;\r\n        this._numberOfPages = value;\r\n\r\n        if (original !== this._numberOfPages) \r\n            this.changed.emit();\r\n    }\r\n\r\n    constructor() {\r\n        this.start = 0;\r\n        this.end = 0;\r\n        this.pageSize = 10;\r\n        this.totalItemCount = 0;\r\n        this.numberOfPages = 0;\r\n    }\r\n}\r\n\r\nexport class DefaultTableStateSort implements ITableStateSort {\r\n    \r\n    public changed: EventEmitter<void> = new EventEmitter<void>();\r\n    \r\n    private _order: SortOrder;\r\n    get order(): SortOrder {\r\n        return this._order;\r\n    }\r\n    set order(order: SortOrder) {\r\n        var original = this._order;\r\n        this._order = order;\r\n\r\n        if (original !== this._order) \r\n            this.changed.emit();\r\n    }\r\n\r\n    private _predicate: string;\r\n    get predicate(): string {\r\n        return this._predicate;\r\n    }\r\n    set predicate(predicate: string) {\r\n        var original = this._predicate;\r\n        this._predicate = predicate;\r\n\r\n        if (original !== this._predicate) \r\n            this.changed.emit();\r\n    }\r\n\r\n    constructor() {\r\n        this._order = SortOrder.NotSet;\r\n        this._predicate = null;\r\n    }\r\n}\r\n\r\nexport class DefaultTableState implements ITableState {\r\n    public sort: DefaultTableStateSort;\r\n    public pagination: DefaultTableStatePagination;\r\n    public search: DefaultTableStateSearch;\r\n\r\n    constructor() {\r\n        this.sort = new DefaultTableStateSort();\r\n        this.pagination = new DefaultTableStatePagination();\r\n        this.search = new DefaultTableStateSearch();\r\n    }\r\n}\r\n\r\n","import { Injectable } from \"@angular/core\";\r\n\r\nexport enum SortOrder {\r\n\r\n    NotSet,\r\n    Ascending,\r\n    Descending\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\n\r\nimport { IDataPipeService } from \"./IDataPipeService.interface\";\r\nimport { ITableState } from \"./../TableState/ITableState.interface\";\r\nimport { IConfiguration } from \"./../Configuration/IConfiguration.interface\";\r\nimport { SortOrder } from \"./../Sort/SortOrder.enum\";\r\n\r\n@Injectable()\r\nexport class DefaultDataPipeService<TTableState extends ITableState, TConfiguration extends IConfiguration> \r\n    implements IDataPipeService {\r\n\r\n    public pipe(data: Array<any>, tableState: TTableState, configuration: TConfiguration): Array<any> {\r\n        if (!data || !Array.isArray(data)) {\r\n            return undefined;\r\n        }\r\n\r\n        var resultArray = [].concat(data);\r\n\r\n        resultArray = this.filter(resultArray, tableState, configuration);\r\n        resultArray = this.sort(resultArray, tableState, configuration);\r\n        resultArray = this.page(resultArray, tableState, configuration);\r\n    \r\n        return resultArray;\r\n    }\r\n\r\n    sort(data: Array<any>, tableState: TTableState, configuration: TConfiguration): Array<any> {\r\n        if (!tableState.sort.predicate || tableState.sort.order === SortOrder.NotSet) \r\n            return data;\r\n        \r\n        return data.sort((a, b) => {\r\n            // TODO: Implement configuration setting to help with aggresive minification by consumer\r\n            var aValue = a[tableState.sort.predicate];\r\n            var bValue = b[tableState.sort.predicate];\r\n\r\n            // null or undefined values should be first\r\n            if (!aValue) return 1;\r\n\r\n            var filter = aValue > bValue ? 1 : aValue < bValue ? -1 : 0;\r\n\r\n            // Descending order only if items not equal, and descending selected.\r\n            if (tableState.sort.order === SortOrder.Descending\r\n                && filter !== 0) {\r\n                filter = filter * -1\r\n            };\r\n\r\n            return filter;\r\n        });\r\n\r\n    }\r\n\r\n    filter(data: Array<any>, tableState: TTableState, configuration: TConfiguration): Array<any> {\r\n        // TODO: Implement filtering\r\n        return data;\r\n    }\r\n\r\n    page(data: Array<any>, tableState: TTableState, configuration: TConfiguration): Array<any> {\r\n        if (!tableState.pagination || !tableState.pagination.pageSize)\r\n            return data;\r\n\r\n        tableState.pagination.numberOfPages = data.length > 0 ? Math.ceil(data.length / tableState.pagination.pageSize) : 1;\r\n        tableState.pagination.start = tableState.pagination.start >= data.length ? (tableState.pagination.numberOfPages - 1) * tableState.pagination.pageSize : tableState.pagination.start;\r\n\r\n        return data.slice(tableState.pagination.start, tableState.pagination.start + tableState.pagination.pageSize);\r\n    }\r\n    \r\n}","import { EventEmitter } from \"@angular/core\";\r\n\r\nimport { DefaultDataPipeService } from \"./../Pipe/DefaultDataPipeService.class\";\r\nimport { IConfiguration } from \"./IConfiguration.interface\";\r\n\r\nexport class DefaultConfiguration implements IConfiguration {\r\n    public changed: EventEmitter<void> = new EventEmitter<void>();\r\n    \r\n    private _ascendingCssClass: string;\r\n    get ascendingCssClass(): string {\r\n        return this._ascendingCssClass;\r\n    }\r\n    set ascendingCssClass(cssClass: string) {\r\n        var original = this._ascendingCssClass;\r\n        this._ascendingCssClass = cssClass;\r\n\r\n        if (original !== this._ascendingCssClass) \r\n            this.changed.emit();\r\n    }\r\n\r\n    private _descendingCssClass: string;\r\n    get descendingCssClass(): string {\r\n        return this._descendingCssClass;\r\n    }\r\n    set descendingCssClass(cssClass: string) {\r\n        var original = this._descendingCssClass;\r\n        this._descendingCssClass = cssClass;\r\n\r\n        if (original !== this._descendingCssClass) \r\n            this.changed.emit();\r\n    }\r\n\r\n    private _pipeServiceType: any;\r\n    get pipeServiceType(): any {\r\n        return this._pipeServiceType;\r\n    }\r\n    set pipeServiceType(t: any) {\r\n        var original = this._pipeServiceType;\r\n        this._pipeServiceType = t;\r\n\r\n        if (original !== this._pipeServiceType) \r\n            this.changed.emit();\r\n    }\r\n\r\n    public static create(): DefaultConfiguration{\r\n        var config = new DefaultConfiguration();\r\n\r\n        config.ascendingCssClass = 'pt-sort-asc'\r\n        config.descendingCssClass = 'pt-sort-desc'\r\n        config.pipeServiceType = DefaultDataPipeService;\r\n\r\n        return config; \r\n    } \r\n\r\n    public copy() : DefaultConfiguration{\r\n        var config = new DefaultConfiguration();\r\n\r\n        config.ascendingCssClass = this.ascendingCssClass;\r\n        config.descendingCssClass = this.descendingCssClass\r\n        config.pipeServiceType = this.pipeServiceType;\r\n\r\n        return config; \r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n// import components / directives for the module\r\nimport { TableDirective } from './src/Table/Table.directive';\r\n\r\nimport { SortDirective } from './src/Sort/Sort.directive';\r\n\r\nimport { DefaultDataPipeService } from './src/Pipe/DefaultDataPipeService.class';\r\n\r\nimport { PaginationComponent } from './src/Pagination/Pagination.component';\r\n\r\nimport { ConfigurationProvider } from './src/Configuration/ConfigurationProvider.class';\r\n\r\n// export for any consumers of module\r\nexport { TableDirective } from './src/Table/Table.directive';\r\n\r\nexport { SortOrder } from './src/Sort/SortOrder.enum';\r\nexport { SortDirective } from './src/Sort/Sort.directive';\r\n\r\nexport { ITableState } from './src/TableState/ITableState.interface';\r\nexport { DefaultTableState, DefaultTableStatePagination, DefaultTableStateSearch, DefaultTableStateSort } from './src/TableState/DefaultTableState.class';\r\n\r\nexport { DefaultDataPipeService } from './src/Pipe/DefaultDataPipeService.class';\r\nexport { IDataPipeService } from './src/Pipe/IDataPipeService.interface';\r\n\r\nexport { PaginationComponent } from './src/Pagination/Pagination.component';\r\n\r\nexport { ConfigurationProvider } from './src/Configuration/ConfigurationProvider.class';\r\nexport { IConfiguration } from './src/Configuration/IConfiguration.interface';\r\nexport { DefaultConfiguration } from './src/Configuration/DefaultConfiguration.class';\r\n\r\nvar declarations =[\r\n        TableDirective,\r\n        SortDirective,\r\n        PaginationComponent\r\n    ]; \r\n\r\n@NgModule({\r\n    exports:declarations,\r\n    declarations: [declarations],\r\n    imports: [CommonModule],\r\n    providers: [DefaultDataPipeService, ConfigurationProvider]\r\n})\r\nexport class PowerTableModule {\r\n\r\n}\r\n"]}